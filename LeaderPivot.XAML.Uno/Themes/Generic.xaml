<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:LeaderAnalytics.LeaderPivot.XAML.UNO"
    xmlns:ui="using:CommunityToolkit.WinUI.UI"
    xmlns:triggers="using:CommunityToolkit.WinUI.UI.Triggers"
    xmlns:Behaviors="http://schemas.microsoft.com/xaml/behaviors">
    
    

    <Style TargetType="ScrollViewer">
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    </Style>

    <Style TargetType="local:DropDownButton" x:Key="DropDownButtonStyle">
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Margin" Value="0,0,6,0" />
    </Style>

    <Style TargetType="Button" x:Key="ReloadButtonStyle">
        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="LeftTextBlockStyle">
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    
    <Style TargetType="TextBlock" x:Key="RightTextBlockStyle">
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
    </Style>

    <Style TargetType="local:LeaderPivotControl" >
        <Setter Property="CellBorderBrush" Value="Black"/>
        <Setter Property="CellBorderThickness" Value=".5"/>
        <Setter Property="CellPadding" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:LeaderPivotControl" >
                    <Border Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            VerticalAlignment="Top" HorizontalAlignment="Left">

                        <Border BorderBrush="{TemplateBinding CellBorderBrush}" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                                BorderThickness="{TemplateBinding CellBorderThickness}"
                                DataContext="{Binding (ui:FrameworkElementExtensions.Ancestor), RelativeSource={RelativeSource Self}}" >

                            <ScrollViewer x:Name="ContentScrollViewer" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                                <Grid x:Name="PART_Grid" />
                            </ScrollViewer>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:CellContainer">
        <Setter Property="Margin" Value="0.00"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:CellContainer">
                    <!-- This border provides uniform BorderBrush and BorderThickness only. -->
                    <Border Background="Transparent" Padding="0" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                            BorderBrush="{Binding (ui:FrameworkElementExtensions.Ancestor).CellBorderBrush, RelativeSource={RelativeSource Self}}"
                            BorderThickness="{Binding (ui:FrameworkElementExtensions.Ancestor).CellBorderThickness, RelativeSource={RelativeSource Self}}"
                            DataContext="{Binding (ui:FrameworkElementExtensions.Ancestor), RelativeSource={RelativeSource Self}}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:BaseCell" x:Key="BaseCellStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:BaseCell">
                    
                    <!-- This border provides cell-specific background. Also proives padding based on value provided by LeaderPivotControl  -->
                    <Border Background="{TemplateBinding Background}" BorderThickness="0" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                            Padding="{Binding (ui:FrameworkElementExtensions.Ancestor).CellPadding, RelativeSource={RelativeSource Self}}">

                        <Border.Resources>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource RightTextBlockStyle}"></Style>
                        </Border.Resources>
                        
                        <TextBlock Text="{TemplateBinding Content}" Padding="{Binding Padding}" FontSize="{Binding FontSize}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:BaseCell" BasedOn="{StaticResource BaseCellStyle}" x:Key="BaseTotalCellStyle">
        <Setter Property="Background" Value="LightGray"/>
    </Style>

    <Style TargetType="local:MeasureCell" BasedOn="{StaticResource BaseCellStyle}">
    </Style>

    <Style TargetType="local:TotalCell"  BasedOn="{StaticResource BaseTotalCellStyle}">
    </Style>

    <Style TargetType="local:GrandTotalCell"  BasedOn="{StaticResource BaseTotalCellStyle}">
    </Style>

    <Style TargetType="local:MeasureLabelCell"  BasedOn="{StaticResource BaseCellStyle}">
        <!--<Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
        </Style.Resources>-->
    </Style>

    <Style TargetType="local:MeasureTotalLabelCell"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <!--<Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
        </Style.Resources>-->
    </Style>

    <Style TargetType="local:TotalHeaderCell"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <!--<Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
        </Style.Resources>-->
    </Style>

    <Style TargetType="local:GrandTotalHeaderCell"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <!--<Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
        </Style.Resources>-->
    </Style>

    <Style TargetType="local:GroupHeaderCell" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:GroupHeaderCell">
                    <Border Background="{TemplateBinding Background}" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                            BorderThickness="0"
                            Padding="{Binding (ui:FrameworkElementExtensions.Ancestor).CellPadding, RelativeSource={RelativeSource Self}}"
                            DataContext="{Binding (ui:FrameworkElementExtensions.Ancestor), RelativeSource={RelativeSource Self}}">
                        <StackPanel Orientation="Horizontal">
                            <Button ui:FrameworkElementExtensions.AncestorType="local:GroupHeaderCell" x:Name="b1"
                                DataContext="{Binding (ui:FrameworkElementExtensions.Ancestor), RelativeSource={RelativeSource Self}}"
                                Command="{Binding ToggleNodeExpansionCommand}" 
                                CommandParameter="{Binding NodeID}"
                                Visibility="{Binding CanToggleExpansion, Converter={StaticResource BooleanToVisibilityConverter}}"
                                Foreground="{Binding (ui:FrameworkElementExtensions.Ancestor).Foreground, RelativeSource={RelativeSource Self}}">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="45"/>
                                    </Style>
                                    <Style TargetType="Button">
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="Height" Value="25"/>
                                        <Setter Property="Width" Value="25"/>
                                        <Setter Property="HorizontalAlignment" Value="Left"/>
                                        <Setter Property="VerticalAlignment" Value="top"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
                                        <Setter Property="FontSize" Value="12"/>
                                        <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
                                        <Setter Property="Margin" Value="3"/>
                                    </Style>
                                </Button.Resources>
                            </Button>
                            <TextBlock Text="{TemplateBinding Content}" Padding="{Binding Padding}" Margin="0,6,0,0" FontSize="{Binding FontSize}"/>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup>
                                    <VisualState>
                                        <VisualState.StateTriggers>
                                            <triggers:IsEqualStateTrigger Value="{Binding IsExpanded}" To="True"/>
                                        </VisualState.StateTriggers>
                                        <VisualState.Setters>
                                            <Setter Target="b1.Padding" Value="5,7,5,3"/>
                                            <Setter Target="b1.Content" Value="&#xE936;"/>
                                        </VisualState.Setters>
                                    </VisualState>
                                    <VisualState>
                                        <VisualState.StateTriggers>
                                            <triggers:IsEqualStateTrigger Value="{Binding IsExpanded}" To="False"/>
                                        </VisualState.StateTriggers>
                                        <VisualState.Setters>
                                            <Setter Target="b1.Padding" Value="9,4,1,6"/>
                                            <Setter Target="b1.Content" Value="&#xE937;"/>
                                        </VisualState.Setters>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:DimensionContainerCell">
        <Setter Property="Padding" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DimensionContainerCell" >
                    <Border Background="{TemplateBinding Background}" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                            BorderThickness="0"
                            Padding="{Binding (ui:FrameworkElementExtensions.Ancestor).CellPadding}"
                            DataContext="{Binding (ui:FrameworkElementExtensions.Ancestor).CellPadding}">

                        <ScrollViewer 
                            Visibility="{Binding DisplayDimensionButtons, Converter={StaticResource BooleanToVisibilityConverter}}"  
                            VerticalScrollBarVisibility="Auto"
                            HorizontalScrollBarVisibility="Auto"
                            HorizontalAlignment="Left">
                            <ItemsControl Name="DimensionItems" 
                                          ItemsSource="{TemplateBinding Dimensions}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <local:DimensionButton 
                                            Content="{Binding DisplayValue}" 
                                            Dimension="{Binding}" 
                                            SelectionChangedCommand="{Binding (ui:FrameworkElementExtensions.Ancestor).DimensionEventCommand}" >
                                        </local:DimensionButton>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" ></StackPanel>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:MeasureContainerCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:MeasureContainerCell" >
                    <Border Background="{TemplateBinding Background}" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                            BorderThickness="0"
                            Padding="{Binding (ui:FrameworkElementExtensions.Ancestor).CellPadding}"
                            DataContext="{Binding (ui:FrameworkElementExtensions.Ancestor)}">
                        <ScrollViewer x:Name="ContentScrollViewer" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                            <Grid x:Name="PART_Grid">
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Button Content="Reload Data" 
                                        Style="{TemplateBinding ReloadButtonStyle}" Height="25" Width="80"
                                        Command="{Binding ReloadDataCommand}" 
                                        Visibility="{Binding DisplayReloadDataButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                <ItemsControl ItemsSource="{Binding ViewBuilder.Measures}" Grid.Row="1" Margin="3,10,0,0"
                                              Visibility="{Binding DisplayMeasureSelectors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <CheckBox 
                                                Content="{Binding Item.DisplayValue}" 
                                                IsChecked="{Binding IsSelected }" 
                                                Command="{Binding (ui:FrameworkElementExtensions.Ancestor).ToggleMeasureEnabledCommand}" 
                                                CommandParameter="{Binding}"
                                                Style="{Binding (ui:FrameworkElementExtensions.Ancestor).MeasureCheckBoxStyle}" Padding="2" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <CheckBox Content="Grand Totals" Margin="3,0,0,0"
                                          IsChecked="{Binding ViewBuilder.DisplayGrandTotals}" Command="{Binding ReloadDataCommand}" Padding="2" 
                                          Visibility="{Binding DisplayGrandTotalOption, Converter={StaticResource BooleanToVisibilityConverter}}"
                                          Style="{TemplateBinding MeasureCheckBoxStyle}"
                                          Grid.Row="2" />

                                <local:DimensionContainerCell BorderThickness="0" Margin="0,3,0,0"
                                    IsRows="True" 
                                    Dimensions="{Binding ViewBuilder.RowDimensions}" 
                                    Grid.Row="3"/>

                                
                                <ComboBox Grid.Row="4" x:Name="HiddenDimensionsComboBox" 
                                          Style="{TemplateBinding HiddenDimensionsListBoxStyle}"
                                          Padding="6" Margin="0,6,0,6"
                                          Text="Hidden Dimensions" 
                                          
                                          IsEditable="True"
                                          DisplayMemberPath="DisplayValue"
                                          Visibility="{Binding ViewBuilder.HiddenDimensionsVisibility}"
                                          ItemsSource="{Binding ViewBuilder.HiddenDimensions}"
                                          SelectedItem="{x:Null}">
                                    
                                    
                                </ComboBox>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
